{"ast":null,"code":"'use strict';\n\nvar fallback = require('./binaryajax-browser');\n\nvar Buffer = require('buffer').Buffer;\n\nmodule.exports = async function binaryAjax(url) {\n  if (!global.fetch) {\n    return fallback(url);\n  }\n\n  var type = url.slice(-3).toLowerCase();\n  var isOptionalTxt = type === 'prj' || type === 'cpg';\n\n  try {\n    var resp = await fetch(url);\n\n    if (resp.status > 399) {\n      throw new Error(resp.statusText);\n    }\n\n    if (isOptionalTxt) {\n      return resp.text();\n    }\n\n    var resp = await resp.arrayBuffer();\n    return Buffer.from(resp);\n  } catch (e) {\n    if (isOptionalTxt) {\n      return false;\n    }\n\n    throw e;\n  }\n};","map":{"version":3,"sources":["/Users/charlotteweil1/Projets/Viz/gobiTraining/node_modules/shpjs/lib/binaryajax-fetch.js"],"names":["fallback","require","Buffer","module","exports","binaryAjax","url","global","fetch","type","slice","toLowerCase","isOptionalTxt","resp","status","Error","statusText","text","arrayBuffer","from","e"],"mappings":"AAAA;;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAtB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAA/B;;AACAC,MAAM,CAACC,OAAP,GAAiB,eAAeC,UAAf,CAA0BC,GAA1B,EAA8B;AAC7C,MAAI,CAACC,MAAM,CAACC,KAAZ,EAAmB;AACjB,WAAOR,QAAQ,CAACM,GAAD,CAAf;AACD;;AACD,MAAIG,IAAI,GAAGH,GAAG,CAACI,KAAJ,CAAU,CAAC,CAAX,EAAcC,WAAd,EAAX;AACA,MAAIC,aAAa,GAAGH,IAAI,KAAG,KAAP,IAAgBA,IAAI,KAAK,KAA7C;;AACA,MAAI;AACF,QAAII,IAAI,GAAG,MAAML,KAAK,CAACF,GAAD,CAAtB;;AACA,QAAIO,IAAI,CAACC,MAAL,GAAc,GAAlB,EAAuB;AACrB,YAAM,IAAIC,KAAJ,CAAUF,IAAI,CAACG,UAAf,CAAN;AACD;;AACD,QAAIJ,aAAJ,EAAmB;AACjB,aAAOC,IAAI,CAACI,IAAL,EAAP;AACD;;AACD,QAAIJ,IAAI,GAAG,MAAMA,IAAI,CAACK,WAAL,EAAjB;AACA,WAAOhB,MAAM,CAACiB,IAAP,CAAYN,IAAZ,CAAP;AACD,GAVD,CAUE,OAAOO,CAAP,EAAU;AACX,QAAGR,aAAH,EAAiB;AACd,aAAO,KAAP;AACD;;AACD,UAAMQ,CAAN;AACD;AACF,CAtBD","sourcesContent":["'use strict';\nvar fallback = require('./binaryajax-browser');\nvar Buffer = require('buffer').Buffer\nmodule.exports = async function binaryAjax(url){\n  if (!global.fetch) {\n    return fallback(url)\n  }\n  var type = url.slice(-3).toLowerCase();\n  var isOptionalTxt = type==='prj' || type === 'cpg';\n  try {\n    var resp = await fetch(url)\n    if (resp.status > 399) {\n      throw new Error(resp.statusText);\n    }\n    if (isOptionalTxt) {\n      return resp.text();\n    }\n    var resp = await resp.arrayBuffer();\n    return Buffer.from(resp);\n  } catch (e) {\n  \tif(isOptionalTxt){\n      return false;\n    }\n    throw e;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}