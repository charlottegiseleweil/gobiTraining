{"ast":null,"code":"import _classCallCheck from\"/Users/charlotteweil1/Projets/Viz/gobiTraining/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/charlotteweil1/Projets/Viz/gobiTraining/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/charlotteweil1/Projets/Viz/gobiTraining/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/charlotteweil1/Projets/Viz/gobiTraining/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";import L from\"leaflet\";import shp from\"shpjs\";import Container from\"react-bootstrap/Container\";import Legend from\"./Legend\";var parse_georaster=require(\"georaster\");var GeoRasterLayer=require(\"georaster-layer-for-leaflet\");// variables to hold the main map and all the layers displayed\nvar map;var layers;var updateChart;var MainMap=/*#__PURE__*/function(_React$Component){_inherits(MainMap,_React$Component);var _super=_createSuper(MainMap);function MainMap(props){var _this;_classCallCheck(this,MainMap);_this=_super.call(this,props);_this.updateLayers=function(){_this.props.chartIsLinked&&updateChart([]);layers.clearLayers();_this.props.selectedDatasets.forEach(function(id){var dataset=_this.props.datasets[id];switch(dataset.type){case\"shapefile\":addShapefile(dataset,_this.props.chartIsLinked);break;case\"tiles\":addTiles(dataset);break;case\"raster\":addRaster(dataset);break;default:}});};_this.isDataSelected=function(){return _this.props.selectedDatasets.length>0;};_this.state={};updateChart=props.updateChart;return _this;}// initialize the map\n_createClass(MainMap,[{key:\"componentDidMount\",value:function componentDidMount(){// create base map\nmap=L.map(\"map\",{center:this.props.baseMap.center,zoom:this.props.baseMap.zoom,layers:[L.tileLayer(this.props.baseMap.src,{attribution:this.props.baseMap.attribution})]});console.log(map);layers=L.layerGroup().addTo(map);this.updateLayers();// Add labels if provided\nif(this.props.baseMap.labelsSrc){map.createPane(\"labels\");map.getPane(\"labels\").style.zIndex=600;map.getPane(\"labels\").style.pointerEvents=\"none\";L.tileLayer(this.props.baseMap.labelsSrc,{pane:\"labels\"}).addTo(map);}}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){// check if the datasets have changed\nif(this.props.datasets!==prevProps.datasets){this.updateLayers();}}// this function contains the html code that will be rendered\n},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(Container,{fluid:true,className:\"p-0\"},this.isDataSelected()&&/*#__PURE__*/React.createElement(Legend,{datasets:this.props.datasets,selectedDatasets:this.props.selectedDatasets}),/*#__PURE__*/React.createElement(\"div\",{id:\"map\"}));}// function to update all selected layers\n}]);return MainMap;}(React.Component);export default MainMap;function addShapefile(dataset,chartIsLinked){shp(require(\"../data/shapefiles/\"+dataset.src)).then(function(geojson){var newLayer=L.geoJSON(geojson,{style:dataset.style?function(feature){return dataset.style(feature.properties[dataset.styleProperty]);}:{},// add point styling\npointToLayer:function pointToLayer(feature,latlng){if(dataset.icon){// create icon if there is one specified\nvar myIcon=L.icon({iconUrl:require(\"../static/icons/\"+dataset.icon),iconSize:[35,35],iconAnchor:[16,37],popupAnchor:[0,-28],tooltipAnchor:[0,-28]});return L.marker(latlng,{icon:myIcon});}else{return L.marker(latlng);}},onEachFeature:function onEachFeature(feature,layer){// if we want to bind the map to a chart\nif(chartIsLinked&&dataset.chartProperties){//bind function to click\nlayer.on(\"click\",function(e){var columns=[[\"x-label\",\"Example x \"]];for(var i=0;i<dataset.chartProperties.length;i++){columns.push([dataset.namesOfProperties[i],feature.properties[dataset.chartProperties[i]]]);}updateChart(columns);newLayer.setStyle(function(feature){return dataset.style(feature.properties[dataset.styleProperty]);});//resets layer colors\nlayer.setStyle({fillOpacity:0.7,fillColor:\"#000000\"});//highlights selected.\n});}// if we want to add a tooltip\nif(dataset.tooltip){layer.bindTooltip(dataset.tooltip(feature));}// if we want to add a popup on click\nif(dataset.popup){layer.bindPopup(dataset.popup(feature));}}});newLayer.addTo(layers);});}function addRaster(dataset){var style=dataset.style?dataset.style:function(d){return\"#ffffff\";};fetch(require(\"../data/rasters/\"+dataset.src)).then(function(response){return response.arrayBuffer();}).then(function(arrayBuffer){parse_georaster(arrayBuffer).then(function(georaster){var layer=new GeoRasterLayer({georaster:georaster,opacity:0.7,pixelValuesToColorFn:function pixelValuesToColorFn(values){return style(values[0]);},resolution:64// optional parameter for adjusting display resolution\n});layer.addTo(layers);});});}function addTiles(dataset){L.tileLayer(dataset.src,{attribution:\"\"}).addTo(layers);}","map":{"version":3,"sources":["/Users/charlotteweil1/Projets/Viz/gobiTraining/src/components/Map.js"],"names":["React","L","shp","Container","Legend","parse_georaster","require","GeoRasterLayer","map","layers","updateChart","MainMap","props","updateLayers","chartIsLinked","clearLayers","selectedDatasets","forEach","id","dataset","datasets","type","addShapefile","addTiles","addRaster","isDataSelected","length","state","center","baseMap","zoom","tileLayer","src","attribution","console","log","layerGroup","addTo","labelsSrc","createPane","getPane","style","zIndex","pointerEvents","pane","prevProps","Component","then","geojson","newLayer","geoJSON","feature","properties","styleProperty","pointToLayer","latlng","icon","myIcon","iconUrl","iconSize","iconAnchor","popupAnchor","tooltipAnchor","marker","onEachFeature","layer","chartProperties","on","e","columns","i","push","namesOfProperties","setStyle","fillOpacity","fillColor","tooltip","bindTooltip","popup","bindPopup","d","fetch","response","arrayBuffer","georaster","opacity","pixelValuesToColorFn","values","resolution"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport L from \"leaflet\";\nimport shp from \"shpjs\";\nimport Container from \"react-bootstrap/Container\";\n\nimport Legend from \"./Legend\";\n\nconst parse_georaster = require(\"georaster\");\nconst GeoRasterLayer = require(\"georaster-layer-for-leaflet\");\n\n// variables to hold the main map and all the layers displayed\nlet map;\nlet layers;\nlet updateChart;\n\nclass MainMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    updateChart = props.updateChart;\n  }\n\n  // initialize the map\n  componentDidMount() {\n    // create base map\n    map = L.map(\"map\", {\n      center: this.props.baseMap.center,\n      zoom: this.props.baseMap.zoom,\n      layers: [\n        L.tileLayer(this.props.baseMap.src, {\n          attribution: this.props.baseMap.attribution,\n        }),\n      ],\n    });\n    console.log(map);\n    layers = L.layerGroup().addTo(map);\n    this.updateLayers();\n\n    // Add labels if provided\n    if (this.props.baseMap.labelsSrc) {\n      map.createPane(\"labels\");\n      map.getPane(\"labels\").style.zIndex = 600;\n      map.getPane(\"labels\").style.pointerEvents = \"none\";\n      L.tileLayer(this.props.baseMap.labelsSrc, { pane: \"labels\" }).addTo(map);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // check if the datasets have changed\n    if (this.props.datasets !== prevProps.datasets) {\n      this.updateLayers();\n    }\n  }\n\n  // this function contains the html code that will be rendered\n  render() {\n    return (\n      <Container fluid={true} className=\"p-0\">\n        {this.isDataSelected() && (\n          <Legend\n            datasets={this.props.datasets}\n            selectedDatasets={this.props.selectedDatasets}\n          />\n        )}\n        <div id=\"map\"></div>\n      </Container>\n    );\n  }\n\n  // function to update all selected layers\n  updateLayers = () => {\n    this.props.chartIsLinked && updateChart([]);\n    layers.clearLayers();\n    this.props.selectedDatasets.forEach((id) => {\n      let dataset = this.props.datasets[id];\n\n      switch (dataset.type) {\n        case \"shapefile\":\n          addShapefile(dataset, this.props.chartIsLinked);\n          break;\n\n        case \"tiles\":\n          addTiles(dataset);\n          break;\n\n        case \"raster\":\n          addRaster(dataset);\n          break;\n\n        default:\n      }\n    });\n  };\n\n  isDataSelected = () => {\n    return this.props.selectedDatasets.length > 0;\n  };\n}\n\nexport default MainMap;\n\nfunction addShapefile(dataset, chartIsLinked) {\n  shp(require(\"../data/shapefiles/\" + dataset.src)).then(function (geojson) {\n    let newLayer = L.geoJSON(geojson, {\n      style: dataset.style\n        ? function (feature) {\n            return dataset.style(feature.properties[dataset.styleProperty]);\n          }\n        : {},\n\n      // add point styling\n      pointToLayer: function (feature, latlng) {\n        if (dataset.icon) {\n          // create icon if there is one specified\n          var myIcon = L.icon({\n            iconUrl: require(\"../static/icons/\" + dataset.icon),\n            iconSize: [35, 35],\n            iconAnchor: [16, 37],\n            popupAnchor: [0, -28],\n            tooltipAnchor: [0, -28],\n          });\n          return L.marker(latlng, { icon: myIcon });\n        } else {\n          return L.marker(latlng);\n        }\n      },\n\n      onEachFeature: function (feature, layer) {\n        // if we want to bind the map to a chart\n        if (chartIsLinked && dataset.chartProperties) {\n          //bind function to click\n          layer.on(\"click\", function (e) {\n            let columns = [[\"x-label\", \"Example x \"]];\n\n            for (let i = 0; i < dataset.chartProperties.length; i++) {\n              columns.push([\n                dataset.namesOfProperties[i],\n                feature.properties[dataset.chartProperties[i]],\n              ]);\n            }\n            updateChart(columns);\n\n            newLayer.setStyle(function (feature) {\n              return dataset.style(feature.properties[dataset.styleProperty]);\n            }); //resets layer colors\n            layer.setStyle({ fillOpacity: 0.7, fillColor: \"#000000\" }); //highlights selected.\n          });\n        }\n        // if we want to add a tooltip\n        if (dataset.tooltip) {\n          layer.bindTooltip(dataset.tooltip(feature));\n        }\n\n        // if we want to add a popup on click\n        if (dataset.popup) {\n          layer.bindPopup(dataset.popup(feature));\n        }\n      },\n    });\n    newLayer.addTo(layers);\n  });\n}\n\nfunction addRaster(dataset) {\n  let style = dataset.style\n    ? dataset.style\n    : (d) => {\n        return \"#ffffff\";\n      };\n  fetch(require(\"../data/rasters/\" + dataset.src))\n    .then((response) => response.arrayBuffer())\n    .then((arrayBuffer) => {\n      parse_georaster(arrayBuffer).then((georaster) => {\n        var layer = new GeoRasterLayer({\n          georaster: georaster,\n          opacity: 0.7,\n          pixelValuesToColorFn: (values) => style(values[0]),\n          resolution: 64, // optional parameter for adjusting display resolution\n        });\n        layer.addTo(layers);\n      });\n    });\n}\n\nfunction addTiles(dataset) {\n  L.tileLayer(dataset.src, {\n    attribution: \"\",\n  }).addTo(layers);\n}\n"]},"metadata":{},"sourceType":"module"}